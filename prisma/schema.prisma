datasource db {
  provider = "sqlite"
  url      = "file:dev.db"
  // url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

model User {
  id              String  @id @default(cuid())
  email           String  @unique
  username        String? @unique
  firstName       String? @map("first_name")
  lastName        String? @map("last_name")
  password        String?
  profileImageUrl String? @map("profile_image_url")

  disabled         Boolean @default(false)
  totpEnabled      Boolean @default(false) @map("totp_enabled")
  twoFactorEnabled Boolean @default(false) @map("two_factor_enabled")

  totpSecret      String? @map("totp_secret")
  twoFactorSecret String? @map("two_factor_secret")

  lastSignInAt    DateTime? @map("last_sign_in_at")
  emailVerifiedAt DateTime? @map("email_verified_at")

  googleId String? @map("google_id")

  deletedAt DateTime? @map("deleted_at")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")

  account       Account[]
  roles         Role[]
  session       Session[]
  apiKey        ApiKey[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model RefreshToken {
  id        String  @id @default(uuid())
  isRevoked Boolean @default(false)

  user   User   @relation(fields: [userId], references: [id])
  userId String

  expiresAt DateTime
  deletedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("refresh_tokens")
}

model PasswordReset {
  id        Int      @id @default(autoincrement())
  email     String
  token     String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  expiresAt DateTime @map("expires_at")
}

model Session {
  id             String   @id @default(cuid())
  userId         String   @map("user_id")
  expirationDate DateTime @map("expiration_date")
  createdAt      DateTime @default(now()) @map("created_at")
  user           User     @relation(fields: [userId], references: [id])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  displayName String @default("") @map("display_name")
  description String @default("")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users       User[]
  permissions Permission[]
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  roles Role[]

  @@unique([action, entity, access])
}

model ApiKey {
  id         String   @id @default(cuid())
  name       String
  key        String   @unique
  uuid       String
  lastUsedAt DateTime @map("last_used_at")
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
}
